#Unit 2 python pyscript1.py
#Daffa Asyqar Ahmad Khalisheka
#1103200034


#Command Line
cd ~/catkin_ws/src/

mkdir robot_control

cd robot_control

touch pyscript1.py

touch robot_control_class.py

#Code Python
#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
import time

# Kelas RobotControl
class RobotControl():

    def __init__(self, robot_name="turtlebot"):
        rospy.init_node('robot_control_node', anonymous=True)

        if robot_name == "summit":
            rospy.loginfo("Robot Summit...")
            cmd_vel_topic = "/summit_xl_control/cmd_vel"
            # Kami memeriksa apakah sensor berfungsi
            self._check_summit_laser_ready()
        else:      
            rospy.loginfo("Robot Turtlebot...")      
            cmd_vel_topic='/cmd_vel'
            self._check_laser_ready()

        # Kami memulai publisher
        self.vel_publisher = rospy.Publisher(cmd_vel_topic, Twist, queue_size=1)
        self.cmd = Twist()        

        self.laser_subscriber = rospy.Subscriber(
            '/kobuki/laser/scan', LaserScan, self.laser_callback)
        self.summit_laser_subscriber = rospy.Subscriber(
            '/hokuyo_base/scan', LaserScan, self.summit_laser_callback)
        
        self.ctrl_c = False
        self.rate = rospy.Rate(1)
        rospy.on_shutdown(self.shutdownhook)

    
    def _check_summit_laser_ready(self):
        self.summit_laser_msg = None
        rospy.loginfo("Memeriksa Laser Summit...")
        while self.summit_laser_msg is None and not rospy.is_shutdown():
            try:
                self.summit_laser_msg = rospy.wait_for_message("/hokuyo_base/scan", LaserScan, timeout=1.0)
                rospy.logdebug("Laser /hokuyo_base/scan saat ini SIAP=>" + str(self.summit_laser_msg))

            except:
                rospy.logerr("Laser /hokuyo_base/scan saat ini belum siap, mencoba lagi untuk mendapatkan pemindaian")
        rospy.loginfo("Memeriksa Laser Summit...SELESAI")
        return self.summit_laser_msg

    def _check_laser_ready(self):
        self.laser_msg = None
        rospy.loginfo("Memeriksa Laser...")
        while self.laser_msg is None and not rospy.is_shutdown():
            try:
                self.laser_msg = rospy.wait_for_message("/kobuki/laser/scan", LaserScan, timeout=1.0)
                rospy.logdebug("Laser /kobuki/laser/scan saat ini SIAP=>" + str(self.laser_msg))

            except:
                rospy.logerr("Laser /kobuki/laser/scan saat ini belum siap, mencoba lagi untuk mendapatkan pemindaian")
        rospy.loginfo("Memeriksa Laser...SELESAI")
        return self.laser_msg

    def publish_once_in_cmd_vel(self):
        """
        Ini karena penggunaan topik dalam sistem yang kadang-kadang gagal saat pertama kali digunakan.
        Dalam sistem penerbitan terus menerus, ini bukan masalah besar, tetapi dalam sistem yang hanya menerbitkan
        sekali, ini sangat penting.
        """
        while not self.ctrl_c:
            connections = self.vel_publisher.get_num_connections()
            if connections > 0:
                self.vel_publisher.publish(self.cmd)
                #rospy.loginfo("Cmd Terbitkan")
                break
            else:
                self.rate.sleep()

    def shutdownhook(self):
        # Lebih baik daripada rospy.is_shutdown()
        self.ctrl_c = True

    def laser_callback(self, msg):
        self.laser_msg = msg

    def summit_laser_callback(self, msg):
        self.summit_laser_msg = msg

    def get_laser(self, pos):
        time.sleep(1)
        return self.laser_msg.ranges[pos]

    def get_laser_summit(self, pos):
        time.sleep(1)
        return self.summit_laser_msg.ranges[pos]

    def get_front_laser(self):
        time.sleep(1)
        return self.laser_msg.ranges[360]

    def get_laser_full(self):
        time.sleep(1)
        return self.laser_msg.ranges

    def stop_robot(self):
        #rospy.loginfo("waktu shutdown! Berhentikan robot")
        self.cmd.linear.x = 0.0
        self.cmd.angular.z = 0.0
        self.publish_once_in_cmd_vel()

    def move_straight(self):

        # Inisialisasi kecepatan
        self.cmd.linear.x = 0.5
        self.cmd.linear.y = 0
        self.cmd.linear.z = 0
        self.cmd.angular.x = 0
        self.cmd.angular.y = 0
        self.cmd.angular.z = 0

        # Terbitkan kecepatan
        self.publish_once_in_cmd_vel()

    def move_straight_time(self, motion, speed, time):

        # Inisialisasi kecepatan
        self.cmd.linear.y = 0
        self.cmd.linear.z = 0
        self.cmd.angular.x = 0
        self.cmd.angular.y = 0
        self.cmd.angular.z = 0

        if motion == "maju":
            self.cmd.linear.x = speed
        elif motion == "mundur":
            self.cmd.linear.x = - speed

        i = 0
        # loop untuk menerbitkan perkiraan kecepatan, jarak saat ini = kecepatan * (t1 - t0)
        while (i <= time):

            # Terbitkan kecepatan
            self.vel_publisher.publish(self.cmd)
            i += 1
            self.rate.sleep()

        # atur kecepatan menjadi nol untuk menghentikan robot
        self.stop_robot()

        s = "Menggerakkan robot ke arah " + motion + " selama " + str(time) + " detik dengan kecepatan " + str(speed) + "  m/s"
        return s

    def turn(self, clockwise, speed, time):

        # Inisialisasi kecepatan
        self.cmd.linear.x = 0
        self.cmd.linear.y = 0
        self.cmd.linear.z = 0
        self.cmd.angular.x = 0
        self.cmd.angular.y = 0

        if clockwise == "searah-jarum-jam":
            self.cmd.angular.z = -speed
        else:
            self.cmd.angular.z = speed

        i = 0
        # loop untuk menerbitkan perkiraan kecepatan, jarak saat ini = kecepatan * (t1 - t0)
        while (i <= time):

            # Terbitkan kecepatan
            self.vel_publisher.publish(self.cmd)
            i += 1
            self.rate.sleep()

        # atur kecepatan menjadi nol untuk menghentikan robot
        self.stop_robot()

        s = "Membelokkan robot ke arah " + clockwise + " selama " + str(time) + " detik dengan kecepatan " + str(speed) + "  radian/detik"
        return s

if __name__ == '__main__':
    
    robotcontrol_object = RobotControl()
    try:
        robotcontrol_object.move_straight()

    except rospy.ROSInterruptException:
        pass

from robot_control_class import RobotControl

# Membuat objek RobotControl
rc = RobotControl()

# Mendapatkan jarak dari sensor laser pada posisi 360 derajat
a = rc.get_laser(360)

# Mencetak hasil pengukuran jarak
print("Jarak yang diukur adalah: ", a, " m.")

#Command Line
python pyscript1.py

python3


